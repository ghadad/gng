const test = require('ava')
let fastify = null
const authOps = require('../.common/auth-ops')
const roomOps = require('../.common/room-ops')
const messageOps = require('../.common/message-ops')
const UserContext = require('../.context/user-context')
const RoomContext = require('../.context/room-context')
const MessageContext = require('../.context/message-context')
const data = require('./data')
const owner = new UserContext(data.user.owner)
const moderator = new UserContext(data.user.moderator)
const member = new UserContext(data.user.member)
const room = new RoomContext(data.room, owner)
const ownerMessages = new MessageContext(data.user.owner.message, owner, room, [owner, moderator, member])
const moderatorMessages = new MessageContext(data.user.moderator.message, moderator, room, [owner, moderator, member])

const run = async () => {
  fastify = await require('../../../api/api')()

  authOps.register(fastify, test, 'create the owner user account for messages room creation', owner)
  authOps.activate(fastify, test, 'activate the owner user account for messages room creation', owner)
  authOps.register(fastify, test, 'create the moderator user account for messages room creation', moderator)
  authOps.activate(fastify, test, 'activate the moderator user account for messages room creation', moderator)
  authOps.register(fastify, test, 'create the member user account for messages room creation', member)
  authOps.activate(fastify, test, 'activate the member user account for messages room creation', member)

  roomOps.create(fastify, test, 'create the messages room', room)
  roomOps.push(fastify, test, 'add the moderator to the messages room', 'moderator', room, moderator)
  roomOps.push(fastify, test, 'add the member to the messages room', 'member', room, member)

  messageOps.create(fastify, test, 'room owner creates an array of messages', ownerMessages)
  messageOps.create(fastify, test, 'room moderator creates a single message', moderatorMessages)
  messageOps.getInvalidId(fastify, test, 'get with invalid id throws a TypeError', owner, data.invalidMessageId)
  messageOps.get(fastify, test, 'members sees the first message written by the owner', ownerMessages)
  messageOps.getAll(fastify, test, 'members sees all messages written by owner and moderator', [ownerMessages, moderatorMessages])
  messageOps.updateInvalidId(fastify, test, 'update with invalid id throws a TypeError', owner, data.invalidMessageId)
  messageOps.update(fastify, test, 'room moderators updates a single message', moderatorMessages)
  messageOps.getAll(fastify, test, 'members sees all messages written by owner and moderator after message update', [ownerMessages, moderatorMessages])
  messageOps.read(fastify, test, 'room moderator reads owners message', ownerMessages, moderator)
  messageOps.unread(fastify, test, 'room moderator unreads owners message', ownerMessages, moderator)
  messageOps.readAll(fastify, test, 'room moderator reads all owners messages', ownerMessages, moderator)
  messageOps.react(fastify, test, 'room moderator likes owners message', ownerMessages, moderator, data.reaction.like)
  messageOps.unreact(fastify, test, 'room moderator unlikes owners message', ownerMessages, moderator)
  messageOps.deleteInvalidId(fastify, test, 'delete with invalid id throws a TypeError', owner, data.invalidMessageId)
  messageOps.delete(fastify, test, 'delete the second owner message', ownerMessages, 1)
  messageOps.getNotFoundId(fastify, test, 'get with unexisting id throws a ReferenceError', ownerMessages, 1)
  messageOps.updateNotFoundId(fastify, test, 'update with unexisting id throws a ReferenceError', ownerMessages, 1)
  messageOps.deleteNotFoundId(fastify, test, 'delete with unexisting id throws a ReferenceError', ownerMessages, 1)

  roomOps.delete(fastify, test, 'deletes the messages room', room, owner)
  authOps.delete(fastify, test, 'deletes the owners user used in messages room', owner)
  authOps.delete(fastify, test, 'deletes the moderators user used in messages room', moderator)
  authOps.delete(fastify, test, 'deletes the members user used in messages room', member)

  test.after('Shutdown API server', async (t) => {
    await fastify.close()
  })
}

run()
